swagger: "2.0"
info:
  version: 1.0.0
  title: jeeves-be
  description: BE for jeeves
basePath: /api/v1
tags:
  - name: User Auth
    description: User authentication and login service
  - name: Topic
    description: API specs for topic endpoints
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.


     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.


     The following syntax must be used in the 'Authorization' header :

         Bearer xxxxxx.yyyyyyy.zzzzzz

consumes:
  - application/json
produces:
  - application/json


definitions:
  SignUp:
    type: object
    required:
      - emailId
      - password
      - userName
      - phoneNo
      - countryCode
    properties:
      emailId:
        type: string
      password:
        type: string
      userName:
        type: string
      phoneNo:
        type: string
      countryCode:
        type: string
  LoginRequest:
    type: object
    required:
      - emailId
      - password
    properties:
      emailId:
        type: string
      password:
        type: string
  LoginResponse:
    required:
      - user
      - token
    properties:
      user:
        type: object
        $ref: "#/definitions/User"
      token:
        type: string
  User:
    type: object
    required:
      - userId
      - userName
    properties:
      userId:
        type: string
      userName:
        type: string
      phoneNo:
        type: string
      emailId:
        type: string
      media:
        $ref: "#/definitions/Media"
      gender:
        type: string
        enum: ["MALE", "FEMALE", "OTHER"]
        
  Media:
    type: object
    properties:
      mediaType:
        type: string
      url:
        type: string
      alt:
        type: string
  Topic:
    type: object
    required:
      - topicName
    properties:
      topicId:
        type: string
      topicName:
        type: string
      description:
        type: string
      createdOn:
        type: string
      media:
        $ref: "#/definitions/Media"
      createdBy:
        $ref: "#/definitions/User"
      tags:
        type: array
        items:
          type: string
  Post:
    type: object
    required:
      - postId
      - postName
      - createdOn
      - content
      - author
      - topic
    properties:
      postId:
        type: string
      postName:
        type: string
      author:
        $ref: "#/definitions/User"
      topic:
        $ref: "#/definitions/Topic"
      createdOn:
        type: string
      updatedOn:
        type: string
      content:
        type: string
      tags:
        type: array
        items:
          type: string
      comments:
        type: array
        items:
          $ref: "#/definitions/Comment"
  Comment:
    type: object
    required:
      - commentId
      - createdOn
      - author
    properties:
      commentId:
        type: string
      createdOn:
        type: string
      author:
        $ref: "#/definitions/User"
      updatedOn:
        type: string
paths:
  /auth/login:
    post:
      tags:
        - User Auth
      description: Create a new example
      parameters:
        - name: login
          in: body
          description: Email ID
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        200:
          description: Returns the user info and token
          

  /auth/signup:
    post:
      tags:
        - User Auth
      parameters:
        - name: signup
          in: body
          description: Sign up request
          required: true
          schema:
            $ref: "#/definitions/SignUp"
      responses:
        200:
          description: User sign up successful
        404:
          description: Example not found
  /content/topic:
    get:
      security:
        - Bearer: []
      x-security-scopes:
        - SUPER-ADMIN
        - OWNER
        - ADMIN
      tags:
        - Topic
      description: Get list of topics based on limit and offset.
      parameters:
        - in: query
          name: offset
          type: integer
        - in: query
          name: limit
          type: integer
      responses:
        200:
          description: Returns the list of topics
    post:
      security:
        - Bearer: []
      x-security-scopes:
        - SUPER-ADMIN
        - OWNER
        - ADMIN
      tags:
          - Topic
      description: Create a new topic
      parameters:
        - name: topic
          in: body
          description: Creating a new topic
          required: true
          schema:
            $ref: "#/definitions/Topic"
      responses:
        200:
          description: Created a new topic
  